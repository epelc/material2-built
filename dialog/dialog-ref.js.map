{"version":3,"sources":["../../../../src/lib/dialog/dialog-ref.ts"],"names":[],"mappings":"AAEA,OAAO,EAAA,OAAE,EAAO,MAAA,cAAA,CAAA;AAEhB;;GAEG;AACH,MAMC;IADD;;;OAGG;IACH,YAOsB,WAAa,EAAmB,kBAAoB;QAApD,gBAAA,GAAA,WAAA,CAAa;QAAmB,uBAAA,GAAA,kBAAA,CAAoB;QALhE,iBAAA,GAA6B,IAAI,OAAA,EAAQ,CAAE;QAAjD,kBAAkB,CAAC,uBAAuB,CAAC,SAAS,CAClD,CAAC,KAAsC;YACrC,EAAE,CAAC,CAAC,KAAK,KAAK,YAAY,CAAC,CAAC,CAAC;gBAC3B,uDAAuD;gBACvD,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,CAAC;YACpC,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,KAAK,MAAM,CAAC,CAAC,CAAC;gBAC5B,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;gBAC3B,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBACrC,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;gBAC7B,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;YAChC,CAAC;QACH,CAAC,CAAC,CAAC;IACP,CAAC;IACH;;;;OAIG;IACH,KAMG,CAAA,YAAA;QALC,IAAI,CAMC,OAAC,GAAS,YAAA,CAAa;QAL5B,IAAI,CAMC,kBAAC,CAAkB,KAAC,EAAK,CAAE;IALlC,CAAC;IACH;;;OAGG;IACH,WAMG;QALC,MAAM,CAMC,IAAA,CAAK,YAAC,CAAY,YAAC,EAAY,CAAE;IAL1C,CAAC;CACF;AAED;IACA;;;OAGG;IACH,WAAW,CAAC,SAAS,CAAC,iBAAiB,CAAC;IACxC;;;OAGG;IACH,WAAW,CAAC,SAAS,CAAC,YAAY,CAAC;IACnC;;;OAGG;IACH,WAAW,CAAC,SAAS,CAAC,OAAO,CAAC;IAC9B,gBAAgB;IAChB,WAAW,CAAC,SAAS,CAAC,WAAW,CAAC;IAClC,gBAAgB;IAChB,WAAW,CAAC,SAAS,CAAC,kBAAkB,CAAC;AACzC,CAAC","file":"dialog-ref.js","sourceRoot":"","sourcesContent":["import {OverlayRef} from '../core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MdDialogContainer, MdDialogContainerAnimationState} from './dialog-container';\n/**\n * Reference to a dialog opened via the MdDialog service.\n */\nexport class MdDialogRef<T> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\nprivate _afterClosed: Subject<any> = new Subject();\nprivate _result: any;\n/**\n * @param {?} _overlayRef\n * @param {?} _containerInstance\n */\nconstructor(private _overlayRef: OverlayRef,\npublic _containerInstance: MdDialogContainer) {\n    _containerInstance._onAnimationStateChange.subscribe(\n      (state: MdDialogContainerAnimationState) => {\n        if (state === 'exit-start') {\n          // Transition the backdrop in parallel with the dialog.\n          this._overlayRef.detachBackdrop();\n        } else if (state === 'exit') {\n          this._overlayRef.dispose();\n          this._afterClosed.next(this._result);\n          this._afterClosed.complete();\n          this.componentInstance = null;\n        }\n      });\n  }\n/**\n * Close the dialog.\n * @param {?=} dialogResult Optional result to return to the dialog opener.\n * @return {?}\n */\nclose(dialogResult?: any): void {\n    this._result = dialogResult;\n    this._containerInstance._exit();\n  }\n/**\n * Gets an observable that is notified when the dialog is finished closing.\n * @return {?}\n */\nafterClosed(): Observable<any> {\n    return this._afterClosed.asObservable();\n  }\n}\n\nfunction MdDialogRef_tsickle_Closure_declarations() {\n/**\n * The instance of component opened into the dialog.\n * @type {?}\n */\nMdDialogRef.prototype.componentInstance;\n/**\n * Subject for notifying the user that the dialog has finished closing.\n * @type {?}\n */\nMdDialogRef.prototype._afterClosed;\n/**\n * Result to be passed to afterClosed.\n * @type {?}\n */\nMdDialogRef.prototype._result;\n/** @type {?} */\nMdDialogRef.prototype._overlayRef;\n/** @type {?} */\nMdDialogRef.prototype._containerInstance;\n}\n\n"]}