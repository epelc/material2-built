{"version":3,"sources":["../../../../src/lib/dialog/dialog.ts"],"names":[],"mappings":"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","file":"dialog.js","sourceRoot":"","sourcesContent":["import {Injector, ComponentRef, Injectable, Optional, SkipSelf, TemplateRef} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Overlay, OverlayRef, ComponentType, OverlayState, ComponentPortal} from '../core';\nimport {extendObject} from '../core/util/object-extend';\nimport {ESCAPE} from '../core/keyboard/keycodes';\nimport {DialogInjector} from './dialog-injector';\nimport {MdDialogConfig} from './dialog-config';\nimport {MdDialogRef} from './dialog-ref';\nimport {MdDialogContainer} from './dialog-container';\nimport {TemplatePortal} from '../core/portal/portal';\nimport'rxjs/add/operator/first';\n/**\n * Service to open Material Design modal dialogs.\n */\nexport class MdDialog {\nprivate _openDialogsAtThisLevel: MdDialogRef<any>[] = [];\nprivate _afterAllClosedAtThisLevel = new Subject<void>();\nprivate _afterOpenAtThisLevel = new Subject<MdDialogRef<any>>();\nprivate _boundKeydown = this._handleKeydown.bind(this);\n/**\n * Keeps track of the currently-open dialogs.\n * @return {?}\n */\nget _openDialogs(): MdDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog._openDialogs : this._openDialogsAtThisLevel;\n  }\n/**\n * Subject for notifying the user that all open dialogs have finished closing.\n * @return {?}\n */\nget _afterOpen(): Subject<MdDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog._afterOpen : this._afterOpenAtThisLevel;\n  }\n/**\n * Subject for notifying the user that a dialog has opened.\n * @return {?}\n */\nget _afterAllClosed(): Subject<void> {\n    return this._parentDialog ?\n      this._parentDialog._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /** Gets an observable that is notified when a dialog has been opened. */\n  afterOpen: Observable<MdDialogRef<any>> = this._afterOpen.asObservable();\n\n  /** Gets an observable that is notified when all open dialog have finished closing. */\n  afterAllClosed: Observable<void> = this._afterAllClosed.asObservable();\n/**\n * @param {?} _overlay\n * @param {?} _injector\n * @param {?} _parentDialog\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _injector: Injector,\nprivate _parentDialog: MdDialog) { }\n/**\n * Opens a modal dialog containing the given component.\n * @template T\n * @param {?} componentOrTemplateRef Type of the component to load into the dialog,\n *     or a TemplateRef to instantiate as the dialog content.\n * @param {?=} config Extra configuration options.\n * @return {?} Reference to the newly-opened dialog.\n */\nopen<T>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MdDialogConfig): MdDialogRef<T> {\n    config = _applyConfigDefaults(config);\n\n    let /** @type {?} */ overlayRef = this._createOverlay(config);\n    let /** @type {?} */ dialogContainer = this._attachDialogContainer(overlayRef, config);\n    let /** @type {?} */ dialogRef =\n        this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    if (!this._openDialogs.length && !this._parentDialog) {\n      document.addEventListener('keydown', this._boundKeydown);\n    }\n\n    this._openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this._afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n/**\n * Closes all of the currently-open dialogs.\n * @return {?}\n */\ncloseAll(): void {\n    let /** @type {?} */ i = this._openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this._openDialogs[i].close();\n    }\n  }\n/**\n * Creates the overlay into which the dialog will be loaded.\n * @param {?} dialogConfig The dialog configuration.\n * @return {?} A promise resolving to the OverlayRef for the created overlay.\n */\nprivate _createOverlay(dialogConfig: MdDialogConfig): OverlayRef {\n    let /** @type {?} */ overlayState = this._getOverlayState(dialogConfig);\n    return this._overlay.create(overlayState);\n  }\n/**\n * Attaches an MdDialogContainer to a dialog's already-created overlay.\n * @param {?} overlay Reference to the dialog's underlying overlay.\n * @param {?} config The dialog configuration.\n * @return {?} A promise resolving to a ComponentRef for the attached container.\n */\nprivate _attachDialogContainer(overlay: OverlayRef, config: MdDialogConfig): MdDialogContainer {\n    let /** @type {?} */ viewContainer = config ? config.viewContainerRef : null;\n    let /** @type {?} */ containerPortal = new ComponentPortal(MdDialogContainer, viewContainer);\n\n    let /** @type {?} */ containerRef: ComponentRef<MdDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance.dialogConfig = config;\n\n    return containerRef.instance;\n  }\n/**\n * Attaches the user-provided component to the already-created MdDialogContainer.\n * @template T\n * @param {?} componentOrTemplateRef The type of component being loaded into the dialog,\n *     or a TemplateRef to instantiate as the content.\n * @param {?} dialogContainer Reference to the wrapping MdDialogContainer.\n * @param {?} overlayRef Reference to the overlay in which the dialog resides.\n * @param {?=} config The dialog configuration.\n * @return {?} A promise resolving to the MdDialogRef that should be returned to the user.\n */\nprivate _attachDialogContent<T>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MdDialogContainer,\n      overlayRef: OverlayRef,\n      config?: MdDialogConfig): MdDialogRef<T> {\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    let /** @type {?} */ dialogRef = /** @type {?} */(( new MdDialogRef(overlayRef, dialogContainer) as MdDialogRef<T>));\n\n    if (!config.disableClose) {\n      // When the dialog backdrop is clicked, we want to close it.\n      overlayRef.backdropClick().first().subscribe(() => dialogRef.close());\n    }\n\n    // We create an injector specifically for the component we're instantiating so that it can\n    // inject the MdDialogRef. This allows a component loaded inside of a dialog to close itself\n    // and, optionally, to return a value.\n    let /** @type {?} */ userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    let /** @type {?} */ dialogInjector = new DialogInjector(userInjector || this._injector, dialogRef, config.data);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null));\n    } else {\n      let /** @type {?} */ contentRef = dialogContainer.attachComponentPortal(\n          new ComponentPortal(componentOrTemplateRef, null, dialogInjector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    return dialogRef;\n  }\n/**\n * Creates an overlay state from a dialog config.\n * @param {?} dialogConfig The dialog configuration.\n * @return {?} The overlay configuration.\n */\nprivate _getOverlayState(dialogConfig: MdDialogConfig): OverlayState {\n    let /** @type {?} */ state = new OverlayState();\n    let /** @type {?} */ strategy = this._overlay.position().global();\n    let /** @type {?} */ position = dialogConfig.position;\n\n    state.hasBackdrop = true;\n    state.positionStrategy = strategy;\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    strategy.width(dialogConfig.width).height(dialogConfig.height);\n\n    return state;\n  }\n/**\n * Removes a dialog from the array of open dialogs.\n * @param {?} dialogRef Dialog to be removed.\n * @return {?}\n */\nprivate _removeOpenDialog(dialogRef: MdDialogRef<any>) {\n    let /** @type {?} */ index = this._openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this._openDialogs.splice(index, 1);\n\n      // no open dialogs are left, call next on afterAllClosed Subject\n      if (!this._openDialogs.length) {\n        this._afterAllClosed.next();\n        document.removeEventListener('keydown', this._boundKeydown);\n      }\n    }\n  }\n/**\n * Handles global key presses while there are open dialogs. Closes the\n * top dialog when the user presses escape.\n * @param {?} event\n * @return {?}\n */\nprivate _handleKeydown(event: KeyboardEvent): void {\n    let /** @type {?} */ topDialog = this._openDialogs[this._openDialogs.length - 1];\n\n    if (event.keyCode === ESCAPE && topDialog &&\n      !topDialog._containerInstance.dialogConfig.disableClose) {\n\n      topDialog.close();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: Injector, },\n{type: MdDialog, decorators: [{ type: Optional }, { type: SkipSelf }, ]},\n];\n}\n\nfunction MdDialog_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialog.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialog.ctorParameters;\n/** @type {?} */\nMdDialog.prototype._openDialogsAtThisLevel;\n/** @type {?} */\nMdDialog.prototype._afterAllClosedAtThisLevel;\n/** @type {?} */\nMdDialog.prototype._afterOpenAtThisLevel;\n/** @type {?} */\nMdDialog.prototype._boundKeydown;\n/**\n * Gets an observable that is notified when a dialog has been opened.\n * @type {?}\n */\nMdDialog.prototype.afterOpen;\n/**\n * Gets an observable that is notified when all open dialog have finished closing.\n * @type {?}\n */\nMdDialog.prototype.afterAllClosed;\n/** @type {?} */\nMdDialog.prototype._overlay;\n/** @type {?} */\nMdDialog.prototype._injector;\n/** @type {?} */\nMdDialog.prototype._parentDialog;\n}\n\n/**\n * Applies default options to the dialog config.\n * @param {?} dialogConfig Config to be modified.\n * @return {?} The new configuration object.\n */\nfunction _applyConfigDefaults(dialogConfig: MdDialogConfig): MdDialogConfig {\n  return extendObject(new MdDialogConfig(), dialogConfig);\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}