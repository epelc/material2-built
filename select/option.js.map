{"version":3,"sources":["select/option.ts"],"names":[],"mappings":";;;;;;;;;OAAO,EACL,SAAS,EACT,UAAU,EACV,YAAY,EACZ,KAAK,EACL,MAAM,EACN,QAAQ,EACR,iBAAiB,EAClB,MAAM,eAAe;OACf,EAAC,KAAK,EAAE,KAAK,EAAC,MAAM,2BAA2B;AAiBtD;IASE,kBAAoB,QAAoB,EAAU,SAAmB;QAAjD,aAAQ,GAAR,QAAQ,CAAY;QAAU,cAAS,GAAT,SAAS,CAAU;QAR7D,cAAS,GAAG,KAAK,CAAC;QAK1B,iDAAiD;QACvC,aAAQ,GAAG,IAAI,YAAY,EAAE,CAAC;IAEgC,CAAC;IAGzE,sBAAI,8BAAQ;QADZ,uDAAuD;aACvD;YACE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;QACxB,CAAC;;;OAAA;IAOD,sBAAI,+BAAS;QALb;;;;WAIG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;QACnD,CAAC;;;OAAA;IAED,0BAA0B;IAC1B,yBAAM,GAAN;QACE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;IACvB,CAAC;IAED,4BAA4B;IAC5B,2BAAQ,GAAR;QACE,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;IACzB,CAAC;IAED,mCAAmC;IACnC,wBAAK,GAAL;QACE,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,IAAI,CAAC,eAAe,EAAE,EAAE,OAAO,CAAC,CAAC;IACtE,CAAC;IAED,uEAAuE;IACvE,iCAAc,GAAd,UAAe,KAAoB;QACjC,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,KAAK,KAAK,IAAI,KAAK,CAAC,OAAO,KAAK,KAAK,CAAC,CAAC,CAAC;YACvD,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAC/B,CAAC;IACH,CAAC;IAED;;;OAGG;IACH,wCAAqB,GAArB;QACE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC3B,CAAC;IAED,kCAAe,GAAf;QACE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC;IACrC,CAAC;IAvDD;QAAC,KAAK,EAAE;;2CAAA;IAGR;QAAC,MAAM,EAAE;;8CAAA;IAtBX;QAAC,SAAS,CAAC;YACT,QAAQ,EAAE,MAAM,CAAC,EAAE;YACnB,QAAQ,EAAE,WAAW;YACrB,IAAI,EAAE;gBACJ,MAAM,EAAE,QAAQ;gBAChB,UAAU,EAAE,GAAG;gBACf,qBAAqB,EAAE,UAAU;gBACjC,sBAAsB,EAAE,qBAAqB;gBAC7C,SAAS,EAAE,yBAAyB;gBACpC,WAAW,EAAE,wBAAwB;aACtC;YACD,WAAW,EAAE,aAAa;YAC1B,SAAS,EAAE,CAAC,YAAY,CAAC;YACzB,aAAa,EAAE,iBAAiB,CAAC,IAAI;SACtC,CAAC;;gBAAA;IA8DF,eAAC;AAAD,CA7DA,AA6DC,IAAA","file":"option.js","sourcesContent":["import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  Renderer,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ENTER, SPACE} from '../core/keyboard/keycodes';\n\n@Component({\n  moduleId: module.id,\n  selector: 'md-option',\n  host: {\n    'role': 'option',\n    'tabindex': '0',\n    '[class.md-selected]': 'selected',\n    '[attr.aria-selected]': 'selected.toString()',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)'\n  },\n  templateUrl: 'option.html',\n  styleUrls: ['select.css'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class MdOption {\n  private _selected = false;\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Event emitted when the option is selected. */\n  @Output() onSelect = new EventEmitter();\n\n  constructor(private _element: ElementRef, private _renderer: Renderer) {}\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean {\n    return this._selected;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   * TODO(kara): Add input property alternative for node envs.\n   */\n  get viewValue(): string {\n    return this._getHostElement().textContent.trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    this._selected = true;\n    this.onSelect.emit();\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    this._selected = false;\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    this._renderer.invokeElementMethod(this._getHostElement(), 'focus');\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n    }\n  }\n\n  /**\n   * Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.\n   */\n  _selectViaInteraction() {\n    this._selected = true;\n    this.onSelect.emit(true);\n  }\n\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n}\n"]}