{"version":3,"sources":["select/select.ts"],"names":[],"mappings":"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","file":"select.js","sourcesContent":["import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  Renderer,\n  ViewEncapsulation,\n  ViewChild\n} from '@angular/core';\nimport {MdOption} from './option';\nimport {ENTER, SPACE} from '../core/keyboard/keycodes';\nimport {ListKeyManager} from '../core/a11y/list-key-manager';\nimport {Dir} from '../core/rtl/dir';\nimport {Subscription} from 'rxjs/Subscription';\nimport {transformPlaceholder, transformPanel, fadeInContent} from './select-animations';\nimport {ControlValueAccessor, NgControl} from '@angular/forms';\nimport {coerceBooleanProperty} from '../core/coersion/boolean-property';\n\n@Component({\n  moduleId: module.id,\n  selector: 'md-select',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    'role': 'listbox',\n    'tabindex': '0',\n    '[attr.aria-label]': 'placeholder',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-invalid]': '_control?.invalid || \"false\"',\n    '(keydown)': '_handleKeydown($event)',\n    '(blur)': '_onBlur()'\n  },\n  animations: [\n    transformPlaceholder,\n    transformPanel,\n    fadeInContent\n  ],\n  exportAs: 'mdSelect',\n})\nexport class MdSelect implements AfterContentInit, ControlValueAccessor, OnDestroy {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** The currently selected option. */\n  private _selected: MdOption;\n\n  /** Subscriptions to option events. */\n  private _subscriptions: Subscription[] = [];\n\n  /** Subscription to changes in the option list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to tab events while overlay is focused. */\n  private _tabSubscription: Subscription;\n\n  /** Whether filling out the select is required in the form.  */\n  private _required: boolean = false;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ListKeyManager;\n\n  /** View -> model callback called when value changes */\n  _onChange: (value: any) => void;\n\n  /** View -> model callback called when select has been touched */\n  _onTouched: Function;\n\n  /** This position config ensures that the top left corner of the overlay\n   * is aligned with with the top left of the origin (overlapping the trigger\n   * completely). In RTL mode, the top right corners are aligned instead.\n   */\n  _positions = [{\n    originX: 'start',\n    originY: 'top',\n    overlayX: 'start',\n    overlayY: 'top'\n  }];\n\n  @ViewChild('trigger') trigger: ElementRef;\n  @ContentChildren(MdOption) options: QueryList<MdOption>;\n\n  @Input() placeholder: string;\n\n  @Input()\n  get required() {\n    return this._required;\n  }\n\n  set required(value: any) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  @Output() onOpen = new EventEmitter();\n  @Output() onClose = new EventEmitter();\n\n  constructor(private _element: ElementRef, private _renderer: Renderer,\n              @Optional() private _dir: Dir, @Optional() public _control: NgControl) {\n    this._control.valueAccessor = this;\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n    this._listenToOptions();\n\n    this._changeSubscription = this.options.changes.subscribe(() => {\n      this._dropSubscriptions();\n      this._listenToOptions();\n    });\n  }\n\n  ngOnDestroy() {\n    this._dropSubscriptions();\n    this._changeSubscription.unsubscribe();\n    this._tabSubscription.unsubscribe();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    this._panelOpen = true;\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    this._panelOpen = false;\n    this._focusHost();\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   */\n  writeValue(value: any): void {\n    if (!this.options) { return; }\n\n    this.options.forEach((option: MdOption) => {\n      if (option.value === value) {\n        option.select();\n      }\n    });\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   */\n  registerOnTouched(fn: Function): void {\n    this._onTouched = fn;\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MdOption {\n    return this._selected;\n  }\n\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** The width of the trigger element. This is necessary to match\n   * the overlay width to the trigger width.\n   */\n  _getWidth(): number {\n    return this.trigger.nativeElement.getBoundingClientRect().width;\n  }\n\n  /** The animation state of the placeholder. */\n  _getPlaceholderState(): string {\n    if (this.panelOpen || this.selected) {\n      return this._isRtl() ? 'floating-rtl' : 'floating-ltr';\n    } else {\n      return 'normal';\n    }\n  }\n\n  /** The animation state of the overlay panel. */\n  _getPanelState(): string {\n    return this._isRtl() ? 'showing-rtl' : 'showing-ltr';\n  }\n\n  /** Ensures the panel opens if activated by the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this.open();\n    }\n  }\n\n  /**\n   * When the panel is finished animating, emits an event and focuses\n   * an option if the panel is open.\n   */\n  _onPanelDone(): void {\n    if (this.panelOpen) {\n      this._focusCorrectOption();\n      this.onOpen.emit();\n    } else {\n      this.onClose.emit();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    if (!this.panelOpen) {\n      this._onTouched();\n    }\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ListKeyManager(this.options);\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => {\n      this.close();\n    });\n  }\n\n  /** Listens to selection events on each option. */\n  private _listenToOptions(): void {\n    this.options.forEach((option: MdOption) => {\n      const sub = option.onSelect.subscribe((isUserInput: boolean) => {\n        if (isUserInput) {\n          this._onChange(option.value);\n        }\n        this._onSelect(option);\n      });\n      this._subscriptions.push(sub);\n    });\n  }\n\n  /** Unsubscribes from all option subscriptions. */\n  private _dropSubscriptions(): void {\n    this._subscriptions.forEach((sub: Subscription) => sub.unsubscribe());\n    this._subscriptions = [];\n  }\n\n  /** When a new option is selected, deselects the others and closes the panel. */\n  private _onSelect(option: MdOption): void {\n    this._selected = option;\n    this._updateOptions();\n    this.close();\n  }\n\n  /** Deselect each option that doesn't match the current selection. */\n  private _updateOptions(): void {\n    this.options.forEach((option: MdOption) => {\n      if (option !== this.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  /** Focuses the selected item. If no option is selected, it will focus\n   * the first item instead.\n   */\n  private _focusCorrectOption(): void {\n    if (this.selected) {\n      this._keyManager.focusedItemIndex = this._getOptionIndex(this.selected);\n      this.selected.focus();\n    } else {\n      this._keyManager.focusedItemIndex = 0;\n      this.options.first.focus();\n    }\n  }\n\n  /** Focuses the host element when the panel closes. */\n  private _focusHost(): void {\n    this._renderer.invokeElementMethod(this._element.nativeElement, 'focus');\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MdOption): number {\n    return this.options.reduce((result: number, current: MdOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n}\n"]}