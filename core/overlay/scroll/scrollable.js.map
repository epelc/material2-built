{"version":3,"sources":["../../../../../../src/lib/core/overlay/scroll/scrollable.ts"],"names":[],"mappings":"AAAA,OAAO,EAAA,SAAE,EAAU,UAAA,EAA8B,MAAA,eAAA,CAAA;AACjD,OAAO,EAAA,UAAE,EAAU,MAAA,iBAAA,CAAA;AACnB,OAAO,EAAA,gBAAE,EAAgB,MAAA,qBAAA,CAAA;AACzB,OAAM,+BAAC,CAAA;AACP;;;;GAIG;AACH,MAGC;IAFD;;;OAGG;IACH,YADsB,WAAa,EACb,OAAS;QADT,gBAAA,GAAA,WAAA,CAAa;QACb,YAAA,GAAA,OAAA,CAAS;IAAiB,CAAA;IAEhD;;OAEG;IACH,QAHG;QAIC,IAAI,CAHC,OAAC,CAAO,QAAC,CAAQ,IAAC,CAAI,CAAC;IAI9B,CAAC;IACH;;OAEG;IACH,WALG;QAMC,IAAI,CALC,OAAC,CAAO,UAAC,CAAU,IAAC,CAAI,CAAC;IAMhC,CAAC;IACH;;;OAGG;IACH,eALG;QAMC,MAAM,CALC,UAAA,CAAW,SAAC,CAAS,IAAC,CAAI,WAAC,CAAW,aAAC,EAAc,QAAA,CAAS,CAAC;IAMxE,CAAC;IACH;;OAEG;IACH,aAPG;QAQC,MAAM,CAPC,IAAA,CAAK,WAAC,CAAW;IAQ1B,CAAC;;AANI,qBAAA,GAAoC;IAQ3C,EAPE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAQvB,QAAQ,EAPE,kBAAA;aAQX,EAPC,EAAG;CAQJ,CAPC;AAQF;;GAEG;AARF,yBAAA,GAAA,MAAA;IAUD,EAAC,IAAI,EAAE,UAAU,GAAG;IACpB,EAAC,IAAI,EAAE,gBAAgB,GAAG;CACzB,CAAC;AAGF;IACA,gBAAgB;IAChB,UAAU,CAAC,UAAU,CAAC;IACtB;;;OAGG;IACH,UAAU,CAAC,cAAc,CAAC;IAC1B,gBAAgB;IAChB,UAAU,CAAC,SAAS,CAAC,WAAW,CAAC;IACjC,gBAAgB;IAChB,UAAU,CAAC,SAAS,CAAC,OAAO,CAAC;AAC7B,CAAC","file":"scrollable.js","sourceRoot":"","sourcesContent":["import {Directive, ElementRef, OnInit, OnDestroy} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {ScrollDispatcher} from './scroll-dispatcher';\nimport'rxjs/add/observable/fromEvent';\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\nexport class Scrollable implements OnInit, OnDestroy {\n/**\n * @param {?} _elementRef\n * @param {?} _scroll\n */\nconstructor(private _elementRef: ElementRef,\nprivate _scroll: ScrollDispatcher) {}\n/**\n * @return {?}\n */\nngOnInit() {\n    this._scroll.register(this);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._scroll.deregister(this);\n  }\n/**\n * Returns observable that emits when a scroll event is fired on the host element.\n * @return {?}\n */\nelementScrolled(): Observable<any> {\n    return Observable.fromEvent(this._elementRef.nativeElement, 'scroll');\n  }\n/**\n * @return {?}\n */\ngetElementRef(): ElementRef {\n    return this._elementRef;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdk-scrollable]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: ScrollDispatcher, },\n];\n}\n\nfunction Scrollable_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollable.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollable.ctorParameters;\n/** @type {?} */\nScrollable.prototype._elementRef;\n/** @type {?} */\nScrollable.prototype._scroll;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}