{"version":3,"sources":["../../../../../src/lib/core/compatibility/compatibility.ts"],"names":[],"mappings":"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","file":"compatibility.js","sourceRoot":"","sourcesContent":["import {\n  NgModule,\n  ModuleWithProviders,\n  Directive,\n  OpaqueToken,\n  Inject,\n  Optional,\n  isDevMode,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/platform-browser';\n\n\nexport const /** @type {?} */ MATERIAL_COMPATIBILITY_MODE = new OpaqueToken('md-compatibility-mode');\n\n/** Selector that matches all elements that may have style collisions with AngularJS Material. */\nexport const /** @type {?} */ MAT_ELEMENTS_SELECTOR = `\n  [mat-button],\n  [mat-dialog-actions],\n  [mat-dialog-close],\n  [mat-dialog-content],\n  [mat-dialog-title],\n  [mat-fab],\n  [mat-icon-button],\n  [mat-menu-trigger-for],\n  [mat-mini-fab],\n  [mat-raised-button],\n  [mat-tab-label],\n  [mat-tab-link],\n  [mat-tab-nav-bar],\n  [matTooltip],\n  mat-autocomplete,\n  mat-button-toggle,\n  mat-button-toggle-group,\n  mat-button-toggle,\n  mat-card,\n  mat-card-actions,\n  mat-card-content,\n  mat-card-footer,\n  mat-card-header,\n  mat-card-subtitle,\n  mat-card-title,\n  mat-card-title-group,\n  mat-checkbox,\n  mat-chip,\n  mat-dialog-actions,\n  mat-dialog-container,\n  mat-dialog-content,\n  mat-divider,\n  mat-grid-list,\n  mat-grid-tile,\n  mat-grid-tile-footer,\n  mat-grid-tile-header,\n  mat-hint,\n  mat-icon,\n  mat-list,\n  mat-list-item,\n  mat-menu,\n  mat-nav-list,\n  mat-option,\n  mat-placeholder,\n  mat-progress-bar,\n  mat-progress-circle,\n  mat-pseudo-checkbox,\n  mat-radio-button,\n  mat-radio-group,\n  mat-select,\n  mat-sidenav,\n  mat-sidenav-container,\n  mat-slider,\n  mat-spinner,\n  mat-tab,\n  mat-tab-group,\n  mat-toolbar`;\n\n/** Selector that matches all elements that may have style collisions with AngularJS Material. */\nexport const /** @type {?} */ MD_ELEMENTS_SELECTOR = `\n  [md-button],\n  [md-dialog-actions],\n  [md-dialog-close],\n  [md-dialog-content],\n  [md-dialog-title],\n  [md-fab],\n  [md-icon-button],\n  [md-menu-trigger-for],\n  [md-mini-fab],\n  [md-raised-button],\n  [md-tab-label],\n  [md-tab-link],\n  [md-tab-nav-bar],\n  [mdTooltip],\n  md-autocomplete,\n  md-button-toggle,\n  md-button-toggle-group,\n  md-button-toggle,\n  md-card,\n  md-card-actions,\n  md-card-content,\n  md-card-footer,\n  md-card-header,\n  md-card-subtitle,\n  md-card-title,\n  md-card-title-group,\n  md-checkbox,\n  md-chip,\n  md-dialog-actions,\n  md-dialog-container,\n  md-dialog-content,\n  md-divider,\n  md-grid-list,\n  md-grid-tile,\n  md-grid-tile-footer,\n  md-grid-tile-header,\n  md-hint,\n  md-icon,\n  md-list,\n  md-list-item,\n  md-menu,\n  md-nav-list,\n  md-option,\n  md-placeholder,\n  md-progress-bar,\n  md-progress-circle,\n  md-pseudo-checkbox,\n  md-radio-button,\n  md-radio-group,\n  md-select,\n  md-sidenav,\n  md-sidenav-container,\n  md-slider,\n  md-spinner,\n  md-tab,\n  md-tab-group,\n  md-toolbar`;\n/**\n * Directive that enforces that the `mat-` prefix cannot be used.\n */\nexport class MatPrefixRejector {\n/**\n * @param {?} isCompatibilityMode\n */\nconstructor(  isCompatibilityMode: boolean) {\n    if (!isCompatibilityMode) {\n      throw Error('The \"mat-\" prefix cannot be used out of ng-material v1 compatibility mode.');\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: MAT_ELEMENTS_SELECTOR}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n];\n}\n\nfunction MatPrefixRejector_tsickle_Closure_declarations() {\n/** @type {?} */\nMatPrefixRejector.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatPrefixRejector.ctorParameters;\n}\n\n/**\n * Directive that enforces that the `md-` prefix cannot be used.\n */\nexport class MdPrefixRejector {\n/**\n * @param {?} isCompatibilityMode\n */\nconstructor(  isCompatibilityMode: boolean) {\n    if (isCompatibilityMode) {\n      throw Error('The \"md-\" prefix cannot be used in ng-material v1 compatibility mode.');\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: MD_ELEMENTS_SELECTOR}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n];\n}\n\nfunction MdPrefixRejector_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPrefixRejector.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPrefixRejector.ctorParameters;\n}\n\n/**\n * Module that enforces the default compatibility mode settings. When this module is loaded\n * without NoConflictStyleCompatibilityMode also being imported, it will throw an error if\n * there are any uses of the `mat-` prefix.\n */\nexport class CompatibilityModule {\n/**\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: CompatibilityModule,\n      providers: [],\n    };\n  }\n/**\n * @param {?} document\n */\nconstructor(  document: any) {\n    if (isDevMode() && typeof document && !document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [MatPrefixRejector, MdPrefixRejector],\n  exports: [MatPrefixRejector, MdPrefixRejector],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\n}\n\nfunction CompatibilityModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCompatibilityModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCompatibilityModule.ctorParameters;\n}\n\n/**\n * Module that enforces \"no-conflict\" compatibility mode settings. When this module is loaded,\n * it will throw an error if there are any uses of the `md-` prefix.\n */\nexport class NoConflictStyleCompatibilityMode {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [{\n    provide: MATERIAL_COMPATIBILITY_MODE, useValue: true,\n  }],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NoConflictStyleCompatibilityMode_tsickle_Closure_declarations() {\n/** @type {?} */\nNoConflictStyleCompatibilityMode.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNoConflictStyleCompatibilityMode.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}