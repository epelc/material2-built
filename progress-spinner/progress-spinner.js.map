{"version":3,"sources":["../../../../src/lib/progress-spinner/progress-spinner.ts"],"names":[],"mappings":"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","file":"progress-spinner.js","sourceRoot":"","sourcesContent":["import {\n  Component,\n  HostBinding,\n  ChangeDetectionStrategy,\n  OnDestroy,\n  Input,\n  ElementRef,\n  NgZone,\n  Renderer, Directive\n} from '@angular/core';\n\n\n// TODO(josephperrott): Benchpress tests.\n\n/** A single degree in radians. */\nconst /** @type {?} */ DEGREE_IN_RADIANS = Math.PI / 180;\n/** Duration of the indeterminate animation. */\nconst /** @type {?} */ DURATION_INDETERMINATE = 667;\n/** Duration of the indeterminate animation. */\nconst /** @type {?} */ DURATION_DETERMINATE = 225;\n/** Start animation value of the indeterminate animation */\nconst /** @type {?} */ startIndeterminate = 3;\n/** End animation value of the indeterminate animation */\nconst /** @type {?} */ endIndeterminate = 80;\n/* Maximum angle for the arc. The angle can't be exactly 360, because the arc becomes hidden. */\nconst /** @type {?} */ MAX_ANGLE = 359.99 / 100;\n\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\ntype EasingFn = (currentTime: number, startValue: number,\n                 changeInValue: number, duration: number) => number;\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdProgressSpinnerCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-progress-spinner, mat-progress-spinner',\n  host: {\n    '[class.mat-progress-spinner]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdProgressSpinnerCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinnerCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressSpinnerCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdProgressCircleCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-progress-circle, mat-progress-circle',\n  host: {\n    '[class.mat-progress-circle]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdProgressCircleCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressCircleCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressCircleCssMatStyler.ctorParameters;\n}\n\n/**\n * <md-progress-spinner> component.\n */\nexport class MdProgressSpinner implements OnDestroy {\nprivate _lastAnimationId: number = 0;\nprivate _interdeterminateInterval: number;\nprivate _path: SVGPathElement;\nprivate _mode: ProgressSpinnerMode = 'determinate';\nprivate _value: number;\nprivate _color: string = 'primary';\n/**\n * Values for aria max and min are only defined as numbers when in a determinate mode.  We do this\n * because voiceover does not report the progress indicator as indeterminate if the aria min\n * and/or max value are number values.\n * @return {?}\n */\nget _ariaValueMin() {\n    return this.mode == 'determinate' ? 0 : null;\n  }\n/**\n * @return {?}\n */\nget _ariaValueMax() {\n    return this.mode == 'determinate' ? 100 : null;\n  }\n/**\n * \\@docs-private\n * @return {?}\n */\nget interdeterminateInterval() {\n    return this._interdeterminateInterval;\n  }\n/**\n * \\@docs-private\n * @param {?} interval\n * @return {?}\n */\nset interdeterminateInterval(interval: number) {\n    clearInterval(this._interdeterminateInterval);\n    this._interdeterminateInterval = interval;\n  }\n/**\n * Clean up any animations that were running.\n * @return {?}\n */\nngOnDestroy() {\n    this._cleanupIndeterminateAnimation();\n  }\n/**\n * The color of the progress-spinner. Can be primary, accent, or warn.\n * @return {?}\n */\nget color(): string { return this._color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: string) {\n    this._updateColor(value);\n  }\n/**\n * Value of the progress circle. It is bound to the host as the attribute aria-valuenow.\n * @return {?}\n */\nget value() {\n    if (this.mode == 'determinate') {\n      return this._value;\n    }\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: number) {\n    if (v != null && this.mode == 'determinate') {\n      let /** @type {?} */ newValue = clamp(v);\n      this._animateCircle((this.value || 0), newValue, linearEase, DURATION_DETERMINATE, 0);\n      this._value = newValue;\n    }\n  }\n/**\n * Mode of the progress circle\n * \n * Input must be one of the values from ProgressMode, defaults to 'determinate'.\n * mode is bound to the host as the attribute host.\n * @return {?}\n */\nget mode() {\n    return this._mode;\n  }\n/**\n * @param {?} m\n * @return {?}\n */\nset mode(m: ProgressSpinnerMode) {\n    if (m == 'indeterminate') {\n      this._startIndeterminateAnimation();\n    } else {\n      this._cleanupIndeterminateAnimation();\n    }\n    this._mode = m;\n  }\n/**\n * @param {?} _ngZone\n * @param {?} _elementRef\n * @param {?} _renderer\n */\nconstructor(\nprivate _ngZone: NgZone,\nprivate _elementRef: ElementRef,\nprivate _renderer: Renderer\n  ) {}\n/**\n * Animates the circle from one percentage value to another.\n * \n * @param {?} animateFrom The percentage of the circle filled starting the animation.\n * @param {?} animateTo The percentage of the circle filled ending the animation.\n * @param {?} ease The easing function to manage the pace of change in the animation.\n * @param {?} duration The length of time to show the animation, in milliseconds.\n * @param {?} rotation The starting angle of the circle fill, with 0° represented at the top center\n *    of the circle.\n * @return {?}\n */\nprivate _animateCircle(animateFrom: number, animateTo: number, ease: EasingFn,\n                        duration: number, rotation: number) {\n\n    let /** @type {?} */ id = ++this._lastAnimationId;\n    let /** @type {?} */ startTime = Date.now();\n    let /** @type {?} */ changeInValue = animateTo - animateFrom;\n\n    // No need to animate it if the values are the same\n    if (animateTo === animateFrom) {\n      this._renderArc(animateTo, rotation);\n    } else {\n      let /** @type {?} */ animation = () => {\n        let /** @type {?} */ elapsedTime = Math.max(0, Math.min(Date.now() - startTime, duration));\n\n        this._renderArc(\n          ease(elapsedTime, animateFrom, changeInValue, duration),\n          rotation\n        );\n\n        // Prevent overlapping animations by checking if a new animation has been called for and\n        // if the animation has lasted longer than the animation duration.\n        if (id === this._lastAnimationId && elapsedTime < duration) {\n          requestAnimationFrame(animation);\n        }\n      };\n\n      // Run the animation outside of Angular's zone, in order to avoid\n      // hitting ZoneJS and change detection on each frame.\n      this._ngZone.runOutsideAngular(animation);\n    }\n  }\n/**\n * Starts the indeterminate animation interval, if it is not already running.\n * @return {?}\n */\nprivate _startIndeterminateAnimation() {\n    let /** @type {?} */ rotationStartPoint = 0;\n    let /** @type {?} */ start = startIndeterminate;\n    let /** @type {?} */ end = endIndeterminate;\n    let /** @type {?} */ duration = DURATION_INDETERMINATE;\n    let /** @type {?} */ animate = () => {\n      this._animateCircle(start, end, materialEase, duration, rotationStartPoint);\n      // Prevent rotation from reaching Number.MAX_SAFE_INTEGER.\n      rotationStartPoint = (rotationStartPoint + end) % 100;\n      let /** @type {?} */ temp = start;\n      start = -end;\n      end = -temp;\n    };\n\n    if (!this.interdeterminateInterval) {\n      this._ngZone.runOutsideAngular(() => {\n        this.interdeterminateInterval = setInterval(animate, duration + 50, 0, false);\n        animate();\n      });\n    }\n  }\n/**\n * Removes interval, ending the animation.\n * @return {?}\n */\nprivate _cleanupIndeterminateAnimation() {\n    this.interdeterminateInterval = null;\n  }\n/**\n * Renders the arc onto the SVG element. Proxies `getArc` while setting the proper\n * DOM attribute on the `<path>`.\n * @param {?} currentValue\n * @param {?} rotation\n * @return {?}\n */\nprivate _renderArc(currentValue: number, rotation: number) {\n    // Caches the path reference so it doesn't have to be looked up every time.\n    let /** @type {?} */ path = this._path = this._path || this._elementRef.nativeElement.querySelector('path');\n\n    // Ensure that the path was found. This may not be the case if the\n    // animation function fires too early.\n    if (path) {\n      path.setAttribute('d', getSvgArc(currentValue, rotation));\n    }\n  }\n/**\n * Updates the color of the progress-spinner by adding the new palette class to the element\n * and removing the old one.\n * @param {?} newColor\n * @return {?}\n */\nprivate _updateColor(newColor: string) {\n    this._setElementColor(this._color, false);\n    this._setElementColor(newColor, true);\n    this._color = newColor;\n  }\n/**\n * Sets the given palette class on the component element.\n * @param {?} color\n * @param {?} isAdd\n * @return {?}\n */\nprivate _setElementColor(color: string, isAdd: boolean) {\n    if (color != null && color != '') {\n      this._renderer.setElementClass(this._elementRef.nativeElement, `mat-${color}`, isAdd);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-progress-spinner, mat-progress-spinner, md-progress-circle, mat-progress-circle',\n  host: {\n    'role': 'progressbar',\n    '[attr.aria-valuemin]': '_ariaValueMin',\n    '[attr.aria-valuemax]': '_ariaValueMax'\n  },\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: ElementRef, },\n{type: Renderer, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'color': [{ type: Input },],\n'value': [{ type: Input },{ type: HostBinding, args: ['attr.aria-valuenow', ] },],\n'mode': [{ type: HostBinding, args: ['attr.mode', ] },{ type: Input },],\n};\n}\n\nfunction MdProgressSpinner_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinner.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressSpinner.ctorParameters;\n/** @type {?} */\nMdProgressSpinner.propDecorators;\n/**\n * The id of the last requested animation.\n * @type {?}\n */\nMdProgressSpinner.prototype._lastAnimationId;\n/**\n * The id of the indeterminate interval.\n * @type {?}\n */\nMdProgressSpinner.prototype._interdeterminateInterval;\n/**\n * The SVG <path> node that is used to draw the circle.\n * @type {?}\n */\nMdProgressSpinner.prototype._path;\n/** @type {?} */\nMdProgressSpinner.prototype._mode;\n/** @type {?} */\nMdProgressSpinner.prototype._value;\n/** @type {?} */\nMdProgressSpinner.prototype._color;\n/** @type {?} */\nMdProgressSpinner.prototype._ngZone;\n/** @type {?} */\nMdProgressSpinner.prototype._elementRef;\n/** @type {?} */\nMdProgressSpinner.prototype._renderer;\n}\n\n/**\n * <md-spinner> component.\n * \n * This is a component definition to be used as a convenience reference to create an\n * indeterminate <md-progress-spinner> instance.\n */\nexport class MdSpinner extends MdProgressSpinner implements OnDestroy {\n/**\n * @param {?} elementRef\n * @param {?} ngZone\n * @param {?} renderer\n */\nconstructor(elementRef: ElementRef, ngZone: NgZone, renderer: Renderer) {\n    super(ngZone, elementRef, renderer);\n    this.mode = 'indeterminate';\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    // The `ngOnDestroy` from `MdProgressSpinner` should be called explicitly, because\n    // in certain cases Angular won't call it (e.g. when using AoT and in unit tests).\n    super.ngOnDestroy();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-spinner, mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    '[class.mat-spinner]': 'true',\n  },\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: Renderer, },\n];\n}\n\nfunction MdSpinner_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSpinner.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSpinner.ctorParameters;\n}\n\n/**\n * Clamps a value to be between 0 and 100.\n * @param {?} v\n * @return {?}\n */\nfunction clamp(v: number) {\n  return Math.max(0, Math.min(100, v));\n}\n/**\n * Converts Polar coordinates to Cartesian.\n * @param {?} radius\n * @param {?} pathRadius\n * @param {?} angleInDegrees\n * @return {?}\n */\nfunction polarToCartesian(radius: number, pathRadius: number, angleInDegrees: number) {\n  let /** @type {?} */ angleInRadians = (angleInDegrees - 90) * DEGREE_IN_RADIANS;\n\n  return (radius + (pathRadius * Math.cos(angleInRadians))) +\n    ',' + (radius + (pathRadius * Math.sin(angleInRadians)));\n}\n/**\n * Easing function for linear animation.\n * @param {?} currentTime\n * @param {?} startValue\n * @param {?} changeInValue\n * @param {?} duration\n * @return {?}\n */\nfunction linearEase(currentTime: number, startValue: number,\n                    changeInValue: number, duration: number) {\n  return changeInValue * currentTime / duration + startValue;\n}\n/**\n * Easing function to match material design indeterminate animation.\n * @param {?} currentTime\n * @param {?} startValue\n * @param {?} changeInValue\n * @param {?} duration\n * @return {?}\n */\nfunction materialEase(currentTime: number, startValue: number,\n                      changeInValue: number, duration: number) {\n  let /** @type {?} */ time = currentTime / duration;\n  let /** @type {?} */ timeCubed = Math.pow(time, 3);\n  let /** @type {?} */ timeQuad = Math.pow(time, 4);\n  let /** @type {?} */ timeQuint = Math.pow(time, 5);\n  return startValue + changeInValue * ((6 * timeQuint) + (-15 * timeQuad) + (10 * timeCubed));\n}\n/**\n * Determines the path value to define the arc.  Converting percentage values to to polar\n * coordinates on the circle, and then to cartesian coordinates in the viewport.\n * \n * @param {?} currentValue The current percentage value of the progress circle, the percentage of the\n *    circle to fill.\n * @param {?} rotation The starting point of the circle with 0 being the 0 degree point.\n * @return {?} A string for an SVG path representing a circle filled from the starting point to the\n *    percentage value provided.\n */\nfunction getSvgArc(currentValue: number, rotation: number) {\n  let /** @type {?} */ startPoint = rotation || 0;\n  let /** @type {?} */ radius = 50;\n  let /** @type {?} */ pathRadius = 40;\n\n  let /** @type {?} */ startAngle = startPoint * MAX_ANGLE;\n  let /** @type {?} */ endAngle = currentValue * MAX_ANGLE;\n  let /** @type {?} */ start = polarToCartesian(radius, pathRadius, startAngle);\n  let /** @type {?} */ end = polarToCartesian(radius, pathRadius, endAngle + startAngle);\n  let /** @type {?} */ arcSweep = endAngle < 0 ? 0 : 1;\n  let /** @type {?} */ largeArcFlag: number;\n\n  if (endAngle < 0) {\n    largeArcFlag = endAngle >= -180 ? 0 : 1;\n  } else {\n    largeArcFlag = endAngle <= 180 ? 0 : 1;\n  }\n\n  return `M${start}A${pathRadius},${pathRadius} 0 ${largeArcFlag},${arcSweep} ${end}`;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}